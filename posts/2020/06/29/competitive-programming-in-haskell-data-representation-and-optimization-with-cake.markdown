---
title: Competitive programming in Haskell: data representation and optimization, with cake
published: 2020-06-29T21:55:19Z
categories: competitive programming,haskell
tags: boxes,cake,coordinates,intersection,Kattis
---

<p>In my <a href="https://byorgey.wordpress.com/2020/06/24/competitive-programming-in-haskell-vectors-and-2d-geometry/">previous post</a> I challenged you to solve <a href="https://open.kattis.com/problems/checkingbreak">Checking Break</a>, which presents us with a cake in the shape of a rectangular prism, with chocolate chips at various locations, and asks us to check whether a proposed division of the cake is valid. A division of the cake is valid if it is a <em>partition</em> (no pieces overlap and every part of the cake is in some piece) and every piece contains one chocolate chip.</p>
<p>No one posted a solution—I don’t know if that’s because people have lost interest, or because no one was able to solve it—but in any case, don’t read this post yet if you still want to try solving it! As a very small hint, part of the reason I chose this problem is that it is an interesting example of a case where just getting the correct asymptotic time complexity is not enough—we actually have to work a bit to optimize our code so it fits within the allotted time limit.</p>
<h2 id="the-algorithm">The algorithm</h2>
<p>When solving this problem I first just spent some time thinking about the different things I would have to compute and what algorithms and data structures I could use to accomplish them.</p>
<ul>
<li><p>The first thing that jumped out at me is that we are going to want some kind of abstractions for 3D coordinates, and for 3D rectangular prisms (<em>i.e.</em> boxes, <em>i.e.</em> pieces of cake). Probably we can just represent boxes as a pair of points at opposite corners of the box (in fact this is how boxes are given to us). As we plan out how the rest of the solution is going to work we will come up with a list of operations these will need to support.</p>
<p>As an aside, when working in Java I rarely make any classes beyond the single main class, because it’s too heavyweight. When working in Haskell, on the other hand, I often define little abstractions (<em>i.e.</em> data types and operations on them) because they are so lightweight, and being able to cleanly separate things into different layers of abstraction helps me write solutions that are more obviously correct.</p></li>
<li><p>We need to check that the coordinates of each given box are valid.</p></li>
<li><p>We will need to check that every piece of cake contains exactly one chocolate chip. At first this sounds difficult—given a chip, how do we find out which box(es) it is in? Or given a box, how can we find out which chips are in it? To do this efficiently seems like it will require some kind of advanced 3D space partitioning data structure, like an octree or a BSP tree. BUT this is a situation where reading carefully pays off: the problem statement actually says that “the $latex i$-th part must contain the $latex i$-th chocolate chip”. So all we have to do is zip the list of pieces together with the list of chips. We just need an operation to test whether a given point is contained in a given box.</p></li>
<li><p>We have to check that none of the boxes overlap. We can make a primitive to check whether two boxes intersect, but how do we make sure that <em>none</em> of the boxes intersect? Again, complicated space-partitioning data structures come to mind; but since there are at most $latex 10^3$ boxes, the number of pairs is on the order of $latex 10^6$. There can be multiple test cases, though, and the input specification says the sum of values for $latex m$ (the number of pieces) over all test cases will be at most $latex 5 \times 10^4$. That means that in the worst case, we could get up to $latex 50$ test cases with $latex 10^3$ pieces of cake (and thus on the order of $latex 10^6$ pairs of pieces) per test case. Given $latex 10^8$ operations per second as a rough rule of thumb, it should be just barely manageable to do a brute-force check over every possible pair of boxes.</p></li>
<li><p>Finally, we have to check that the pieces account for every last bit of the cake. If we think about trying checking this directly, it is quite tricky. One could imagine making a 3D array representing every cubic unit of cake, and simply marking off the cubes covered by each piece, but this is completely out of the question since the cake could be up to $latex 10^6 \times 10^6 \times 10^6$ in size! Or we could again imagine some complicated space-partitioning structure to keep track of which parts have and have not been covered so far.</p>
<p>But there is a much simpler way: just add up the volume of all the pieces and make sure it is the same as the volume of the whole cake! Of course this relies on the fact that we are also checking to make sure none of the pieces overlap: the volumes being equal implies that the whole cake is covered <em>if and only if</em> none of the pieces overlap. In any case, we will need a way to compute the volume of a box.</p></li>
</ul>
<h2 id="implementation-and-optimization">Implementation and optimization</h2>
<p>Let’s start with some preliminaries: <code>LANGUAGE</code> pragmas, imports, <code>main</code>, and the parser.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color:green;">{-# LANGUAGE OverloadedStrings #-}</span>
<span style="color:green;">{-# LANGUAGE RecordWildCards   #-}</span>
<span style="color:green;">{-# LANGUAGE TupleSections     #-}</span>

<span style="color:blue;font-weight:bold;">import</span>           <span>Control.Arrow</span>
<span style="color:blue;font-weight:bold;">import</span>           <span>Data.Bool</span>
<span style="color:blue;font-weight:bold;">import</span> <span style="color:blue;font-weight:bold;">qualified</span> <span>Data.ByteString.Lazy.Char8</span> <span style="color:blue;font-weight:bold;">as</span> <span>C</span>
<span style="color:blue;font-weight:bold;">import</span>           <span>Data.Monoid</span>

<span style="color:blue;font-weight:bold;">import</span>           <span>ScannerBS</span>

<span>main</span> <span style="color:red;">=</span> <span>C.interact</span> <span>$</span>
  <span>runScanner</span> <span style="color:red;">(</span><span>many</span> <span>tc</span><span style="color:red;">)</span> <span>&gt;&gt;&gt;</span> <span>init</span> <span>&gt;&gt;&gt;</span>
  <span>map</span> <span style="color:red;">(</span><span>solve</span> <span>&gt;&gt;&gt;</span> <span>bool</span> <span style="color:teal;">"NO"</span> <span style="color:teal;">"YES"</span><span style="color:red;">)</span> <span>&gt;&gt;&gt;</span>
  <span>C.unlines</span>

<span style="color:blue;font-weight:bold;">data</span> <span>TC</span> <span style="color:red;">=</span> <span>TC</span> <span style="color:red;">{</span> <span>cake</span> <span style="color:red;">::</span> <span>Box</span><span style="color:red;">,</span> <span>chips</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span>Pos</span><span style="color:red;">]</span><span style="color:red;">,</span> <span>parts</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span>Box</span><span style="color:red;">]</span> <span style="color:red;">}</span>

<span>tc</span> <span style="color:red;">::</span> <span>Scanner</span> <span>TC</span>
<span>tc</span> <span style="color:red;">=</span> <span style="color:blue;font-weight:bold;">do</span>
  <span>a</span> <span style="color:red;">&lt;-</span> <span>int</span>
  <span style="color:blue;font-weight:bold;">case</span> <span>a</span> <span style="color:blue;font-weight:bold;">of</span>
    <span style="color:green;">-</span><span class="hs-num">1</span> <span style="color:red;">-&gt;</span> <span>return</span> <span>undefined</span>
    <span style="color:blue;font-weight:bold;">_</span>  <span style="color:red;">-&gt;</span> <span style="color:blue;font-weight:bold;">do</span>
      <span>xs</span> <span style="color:red;">&lt;-</span> <span>three</span> <span>int</span>
      <span style="color:blue;font-weight:bold;">let</span> <span style="color:red;">[</span><span>b</span><span style="color:red;">,</span><span>c</span><span style="color:red;">,</span><span>m</span><span style="color:red;">]</span> <span style="color:red;">=</span> <span>xs</span>
          <span>cake</span>    <span style="color:red;">=</span> <span>Box</span> <span style="color:red;">(</span><span>Pos</span> <span class="hs-num">1</span> <span class="hs-num">1</span> <span class="hs-num">1</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Pos</span> <span>a</span> <span>b</span> <span>c</span><span style="color:red;">)</span>
      <span>TC</span> <span>cake</span> <span>&lt;$&gt;</span> <span>m</span> <span>`times`</span> <span>pos</span> <span>&lt;*&gt;</span> <span>m</span> <span>`times`</span> <span>box</span></code></pre>
<p>The parser is worth remarking upon. The input consists of multiple test cases, with a single value of $latex -1$ marking the end of the input. This is annoying: ideally, we would have a <code>many</code> combinator that keeps running a <code>Scanner</code> until it fails, but we don’t. To keep things simple and fast, our <a href="https://byorgey.wordpress.com/2019/05/22/competitive-programming-in-haskell-scanner/"><code>Scanner</code> abstraction</a> does not support parse failures and alternatives! The <code>many</code> combinator we made keeps running a given <code>Scanner</code> until the <em>end of input</em>, not until it fails. The quick-and-dirty solution I adopted is to make the test case <code>Scanner</code> return <code>undefined</code> if it sees a <code>-1</code>, and then simply ignore the final element of the list of test cases via <code>init</code>. Not pretty but it gets the job done.</p>
<h2 id="representing-positions-and-boxes">Representing positions and boxes</h2>
<p>Next let’s consider building abstractions for 3D coordinates and boxes. It is very tempting to do something like this:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color:blue;font-weight:bold;">type</span> <span>Pos</span> <span style="color:red;">=</span> <span style="color:red;">[</span><span>Integer</span><span style="color:red;">]</span>
<span style="color:blue;font-weight:bold;">type</span> <span>Box</span> <span style="color:red;">=</span> <span style="color:red;">[</span><span>Pos</span><span style="color:red;">]</span>

<span style="color:green;">-- Check whether one position is componentwise &lt;= another</span>
<span>posLTE</span> <span style="color:red;">::</span> <span>Pos</span> <span style="color:red;">-&gt;</span> <span>Pos</span> <span style="color:red;">-&gt;</span> <span>Pos</span>
<span>posLTE</span> <span>p1</span> <span>p2</span> <span style="color:red;">=</span> <span>and</span> <span>$</span> <span>zipWith</span> <span style="color:red;">(</span><span>&lt;=</span><span style="color:red;">)</span> <span>p1</span> <span>p2</span>

<span style="color:green;">-- ... and so on</span></code></pre>
<p>Using list combinators like <code>zipWith</code> to work with <code>Pos</code> and <code>Box</code> values is quite convenient. And for some problems, using lists is totally fine. Having a small number of large lists—<em>e.g.</em> reading in a list of $latex 10^5$ integers and processing them somehow—is rarely a problem. But having a large number of small lists, as we would if we use lists to represent <code>Pos</code> and <code>Box</code> here, slows things down a lot (as I learned the hard way). I won’t go into the details of why—I am no expert on Haskell performance—but suffice to say that lists are a <em>linked</em> structure with a large memory overhead.</p>
<p>So let’s do something more direct. We’ll represent both <code>Pos</code> and <code>Box</code> as data types with strict fields (the strict fields make a big difference, especially in the case of <code>Pos</code>), and make some trivial <code>Scanner</code>s for them. The <code>volume</code> function computes the volume of a box; given that the coordinates are coordinates of the <em>cubes</em> that make up the pieces, and are both inclusive, we have to add one to the difference between the coordinates. Note we assume that the first coordinate of a <code>Box</code> should be elementwise less than or equal to the second; otherwise, the call to <code>max 0</code> ensures we will get a volume of zero.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color:blue;font-weight:bold;">data</span> <span>Pos</span> <span style="color:red;">=</span> <span>Pos</span> <span>!</span><span>Int</span> <span>!</span><span>Int</span> <span>!</span><span>Int</span>
<span style="color:blue;font-weight:bold;">data</span> <span>Box</span> <span style="color:red;">=</span> <span>Box</span> <span>!</span><span>Pos</span> <span>!</span><span>Pos</span>

<span>pos</span> <span style="color:red;">::</span> <span>Scanner</span> <span>Pos</span>
<span>pos</span> <span style="color:red;">=</span> <span>Pos</span> <span>&lt;$&gt;</span> <span>int</span> <span>&lt;*&gt;</span> <span>int</span> <span>&lt;*&gt;</span> <span>int</span>

<span>box</span> <span style="color:red;">::</span> <span>Scanner</span> <span>Box</span>
<span>box</span> <span style="color:red;">=</span> <span>Box</span> <span>&lt;$&gt;</span> <span>pos</span> <span>&lt;*&gt;</span> <span>pos</span>

<span>volume</span> <span style="color:red;">::</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Int</span>
<span>volume</span> <span style="color:red;">(</span><span>Box</span> <span style="color:red;">(</span><span>Pos</span> <span>x1</span> <span>y1</span> <span>z1</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Pos</span> <span>x2</span> <span>y2</span> <span>z2</span><span style="color:red;">)</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span style="color:red;">(</span><span>x2</span> <span>-.</span> <span>x1</span><span style="color:red;">)</span> <span>*</span> <span style="color:red;">(</span><span>y2</span> <span>-.</span> <span>y1</span><span style="color:red;">)</span> <span>*</span> <span style="color:red;">(</span><span>z2</span> <span>-.</span> <span>z1</span><span style="color:red;">)</span>
  <span style="color:blue;font-weight:bold;">where</span>
    <span>x</span> <span>-.</span> <span>y</span> <span style="color:red;">=</span> <span>max</span> <span class="hs-num">0</span> <span style="color:red;">(</span><span>x</span> <span style="color:green;">-</span> <span>y</span> <span>+</span> <span class="hs-num">1</span><span style="color:red;">)</span></code></pre>
<p>Another very important note is that we are using <code>Int</code> instead of <code>Integer</code>. Using <code>Integer</code> is lovely when we can get away with it, since it means not worrying about overflow at all; but in this case using <code>Int</code> instead of <code>Integer</code> yields a huge speedup (some quick and dirty tests show about a factor of 6 speedup on my local machine, and replacing <code>Int</code> with <code>Integer</code>, without changing anything else, makes my solution no longer accepted on Kattis). Of course, this comes with an obligation to think about potential overflow: the cake can be at most $latex 10^6$ units on each side, giving a maximum possible volume of $latex 10^{18}$. On a 64-bit machine, that just fits within an <code>Int</code> (<code>maxBound :: Int</code> is approximately $latex 9.2 \times 10^{18}$). Since the Kattis test environment is definitely 64-bit, we are good to go. In fact, limits for competitive programming problems are often chosen so that required values will fit within 64-bit signed integers (C++ has no built-in facilities for arbitrary-size integers); I’m quite certain that’s why $latex 10^6$ was chosen as the maximum size of one dimension of the cake.</p>
<h2 id="pos-and-box-utilities">Pos and Box utilities</h2>
<p>Next, some utilities for checking whether one <code>Pos</code> is elementwise less than or equal to another, and for taking the elementwise <code>max</code> and <code>min</code> of two <code>Pos</code> values. Checking whether a <code>Box</code> contains a <code>Pos</code> simply reduces to doing two calls to <code>posLTE</code> (again assuming a valid <code>Box</code> with the first corner componentwise no greater than the second).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>posLTE</span> <span style="color:red;">(</span><span>Pos</span> <span>x1</span> <span>y1</span> <span>z1</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Pos</span> <span>x2</span> <span>y2</span> <span>z2</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>x1</span> <span>&lt;=</span> <span>x2</span> <span>&amp;&amp;</span> <span>y1</span> <span>&lt;=</span> <span>y2</span> <span>&amp;&amp;</span> <span>z1</span> <span>&lt;=</span> <span>z2</span>
<span>posMax</span> <span style="color:red;">(</span><span>Pos</span> <span>x1</span> <span>y1</span> <span>z1</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Pos</span> <span>x2</span> <span>y2</span> <span>z2</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>Pos</span> <span style="color:red;">(</span><span>max</span> <span>x1</span> <span>x2</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>max</span> <span>y1</span> <span>y2</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>max</span> <span>z1</span> <span>z2</span><span style="color:red;">)</span>
<span>posMin</span> <span style="color:red;">(</span><span>Pos</span> <span>x1</span> <span>y1</span> <span>z1</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Pos</span> <span>x2</span> <span>y2</span> <span>z2</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>Pos</span> <span style="color:red;">(</span><span>min</span> <span>x1</span> <span>x2</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>min</span> <span>y1</span> <span>y2</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>min</span> <span>z1</span> <span>z2</span><span style="color:red;">)</span>

<span>contains</span> <span style="color:red;">::</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Pos</span> <span style="color:red;">-&gt;</span> <span>Bool</span>
<span>contains</span> <span style="color:red;">(</span><span>Box</span> <span>lo</span> <span>hi</span><span style="color:red;">)</span> <span>p</span> <span style="color:red;">=</span> <span>posLTE</span> <span>lo</span> <span>p</span> <span>&amp;&amp;</span> <span>posLTE</span> <span>p</span> <span>hi</span></code></pre>
<p>To test whether a box is a valid box within a given cake, we test that its corners are in the correct order and fit within the low and high coordinates of the cake.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>valid</span> <span style="color:red;">::</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Bool</span>
<span>valid</span> <span style="color:red;">(</span><span>Box</span> <span>lo</span> <span>hi</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Box</span> <span>c1</span> <span>c2</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>posLTE</span> <span>lo</span> <span>c1</span> <span>&amp;&amp;</span> <span>posLTE</span> <span>c1</span> <span>c2</span> <span>&amp;&amp;</span> <span>posLTE</span> <span>c2</span> <span>hi</span></code></pre>
<p>How to test whether two given boxes intersect or not? There are probably many ways to do this, but the nicest way I could come up with is to first find the actual <code>Box</code> which represents their intersection, and check whether it has a positive volume (relying on the fact that <code>volume</code> returns 0 for degenerate boxes with out-of-order coordinates). In turn, to find the intersection of two boxes, we just take the coordinatewise <code>max</code> of their lower corners, and the coordinatewise <code>min</code> of their upper corners.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>intersection</span> <span style="color:red;">::</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Box</span>
<span>intersection</span> <span style="color:red;">(</span><span>Box</span> <span>c11</span> <span>c12</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Box</span> <span>c21</span> <span>c22</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>Box</span> <span style="color:red;">(</span><span>posMax</span> <span>c11</span> <span>c21</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>posMin</span> <span>c12</span> <span>c22</span><span style="color:red;">)</span>

<span>disjoint</span> <span style="color:red;">::</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Box</span> <span style="color:red;">-&gt;</span> <span>Bool</span>
<span>disjoint</span> <span>b1</span> <span>b2</span> <span style="color:red;">=</span> <span>volume</span> <span style="color:red;">(</span><span>intersection</span> <span>b1</span> <span>b2</span><span style="color:red;">)</span> <span>==</span> <span class="hs-num">0</span></code></pre>
<h2 id="the-solution">The solution</h2>
<p>Finally, we can put the pieces together to write the <code>solve</code> function. We simply check that all the given cake parts are valid; that every part contains its corresponding chocolate chip; that every pair of parts is disjoint; and that the sum of the volumes of all parts equals the volume of the entire cake.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>solve</span> <span style="color:red;">::</span> <span>TC</span> <span style="color:red;">-&gt;</span> <span>Bool</span>
<span>solve</span> <span style="color:red;">(</span><span>TC</span><span style="color:red;">{</span><span style="color:red;">..</span><span style="color:red;">}</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>and</span>
  <span style="color:red;">[</span> <span>all</span> <span style="color:red;">(</span><span>valid</span> <span>cake</span><span style="color:red;">)</span> <span>parts</span>
  <span style="color:red;">,</span> <span>and</span> <span>$</span> <span>zipWith</span> <span>contains</span> <span>parts</span> <span>chips</span>
  <span style="color:red;">,</span> <span>all</span> <span style="color:red;">(</span><span>uncurry</span> <span>disjoint</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>pairs</span> <span>parts</span><span style="color:red;">)</span>
  <span style="color:red;">,</span> <span>sum</span> <span style="color:red;">(</span><span>map</span> <span>volume</span> <span>parts</span><span style="color:red;">)</span> <span>==</span> <span>volume</span> <span>cake</span>
  <span style="color:red;">]</span></code></pre>
<h2 id="computing-all-pairs">Computing all pairs</h2>
<p>Actually, there’s still one missing piece: how to compute all possible pairs of parts. The simplest possible thing would be to use a list comprehension like</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span style="color:red;">[</span><span style="color:red;">(</span><span>x</span><span style="color:red;">,</span><span>y</span><span style="color:red;">)</span> <span style="color:red;">|</span> <span>x</span> <span style="color:red;">&lt;-</span> <span>parts</span><span style="color:red;">,</span> <span>y</span> <span style="color:red;">&lt;-</span> <span>parts</span><span style="color:red;">]</span></code></pre>
<p>but this has problems: first, it includes a pairing of each part with itself, which will definitely have a nonzero intersection. We could exclude such pairs by adding <code>x /= y</code> as a guard, but there is another problem: <code>(p2,p1)</code> is included whenever <code>(p1,p2)</code> is included, but this is redundant since <code>disjoint</code> is commutative. In fact, we don’t really want <em>all</em> pairs; we want <em>all unordered pairs</em>, that is, all sets of size two. We can do that with the below utility function (which I have now added to <a href="https://github.com/byorgey/comprog-hs/blob/master/Util.hs"><code>Util.hs</code></a>):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>pairs</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span style="color:red;">(</span><span>a</span><span style="color:red;">,</span><span>a</span><span style="color:red;">)</span><span style="color:red;">]</span>
<span>pairs</span> <span>[]</span>     <span style="color:red;">=</span> <span>[]</span>
<span>pairs</span> <span style="color:red;">[</span><span style="color:blue;font-weight:bold;">_</span><span style="color:red;">]</span>    <span style="color:red;">=</span> <span>[]</span>
<span>pairs</span> <span style="color:red;">(</span><span>a</span><span>:</span><span style="color:blue;font-weight:bold;">as</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>map</span> <span style="color:red;">(</span><span>a</span><span style="color:red;">,</span><span style="color:red;">)</span> <span style="color:blue;font-weight:bold;">as</span> <span>++</span> <span>pairs</span> <span style="color:blue;font-weight:bold;">as</span></code></pre>
<p>This is accepted, and runs in about 0.91 seconds (the time limit is 2 seconds). However, I was curious whether we are paying anything here for all the list operations, so I wrote the following version, which takes a binary operation for combining list elements, and a <code>Monoid</code> specifying how to combine the results, and directly returns the monoidal result of combining all the pairs, without ever constructing any intermediate lists or tuples at all. It’s sort of like taking the above <code>pairs</code> function, following it by a call to <code>foldMap</code>, and then manually fusing the two to get rid of the intermediate list.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>withPairs</span> <span style="color:red;">::</span> <span>Monoid</span> <span>r</span> <span style="color:red;">=&gt;</span> <span style="color:red;">(</span><span>a</span> <span style="color:red;">-&gt;</span> <span>a</span> <span style="color:red;">-&gt;</span> <span>r</span><span style="color:red;">)</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span>r</span>
<span>withPairs</span> <span style="color:blue;font-weight:bold;">_</span> <span>[]</span>     <span style="color:red;">=</span> <span>mempty</span>
<span>withPairs</span> <span style="color:blue;font-weight:bold;">_</span> <span style="color:red;">[</span><span style="color:blue;font-weight:bold;">_</span><span style="color:red;">]</span>    <span style="color:red;">=</span> <span>mempty</span>
<span>withPairs</span> <span>f</span> <span style="color:red;">(</span><span>a</span><span>:</span><span style="color:blue;font-weight:bold;">as</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>go</span> <span style="color:blue;font-weight:bold;">as</span>
  <span style="color:blue;font-weight:bold;">where</span>
    <span>go</span> <span>[]</span>        <span style="color:red;">=</span> <span>withPairs</span> <span>f</span> <span style="color:blue;font-weight:bold;">as</span>
    <span>go</span> <span style="color:red;">(</span><span>a2</span><span>:</span><span>rest</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>f</span> <span>a</span> <span>a2</span> <span>&lt;&gt;</span> <span>go</span> <span>rest</span></code></pre>
<p>To use this, we have to change the <code>solve</code> function slightly: instead of</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">  <span style="color:red;">,</span> <span>all</span> <span style="color:red;">(</span><span>uncurry</span> <span>disjoint</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>pairs</span> <span>parts</span><span style="color:red;">)</span></code></pre>
<p>we now have</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">  <span style="color:red;">,</span> <span>getAll</span> <span>$</span> <span>withPairs</span> <span style="color:red;">(</span><span style="color:red;">\</span><span>p1</span> <span>p2</span> <span style="color:red;">-&gt;</span> <span>All</span> <span>$</span> <span>disjoint</span> <span>p1</span> <span>p2</span><span style="color:red;">)</span> <span>parts</span></code></pre>
<p>This version runs significantly faster on Kattis—0.72 seconds as opposed to 0.91 seconds. (In fact, it’s faster than the currently-fastest Java solution (0.75 seconds), though there is still a big gap to the fastest C++ solution (0.06 seconds).) I don’t completely understand why this version is faster—perhaps one of you will be able to enlighten us!</p>
<h2 id="for-next-time">For next time</h2>
<p>For next time, we’ll go back to computational geometry: I invite you to solve <a href="https://open.kattis.com/problems/cookiecutter">Cookie Cutters</a>.</p>

