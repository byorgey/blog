---
katex: true
title: 'Eastman maximal comma-free codes in Haskell'
published: 2016-07-07T21:58:26Z
categories: combinatorics,haskell
tags: code,commafree,Eastman,Knuth
---

<p>This past January I watched a <a href="https://www.youtube.com/watch?v=48iJx8FVuis">video of Don Knuth’s most recent annual Christmas lecture</a>. Typically his Christmas lectures have been about trees, but breaking with tradition, he gave this lecture about comma-free codes, and presented an implementation of an interesting algorithm due to Willard Eastman. Of course his implementation was written in <a href="http://www-cs-faculty.stanford.edu/~uno/cweb.html">CWEB</a>, and during the course of the lecture he noted that his algorithm was iterative, and he didn’t know of a nice way to write it recursively (or something like that). Naturally, that sounded like a challenge, so I implemented it in Haskell, and I think it came out quite nicely. (It still uses “iteration” in the sense of the <code>iterate</code> function, but of course that uses recursion, so…?) Unfortunately, that was in January, it is now July, and I don’t really remember how it works. So I decided I had better write about it now, before I forget even more about how it works.</p>
<p>A <em>comma-free code</em> is a set $C$ of strings such that if you concatenate any two strings in $C$, the result does not contain any elements of $C$ as internal substrings. The term “comma-free” refers to the fact that sequences of strings from $C$ can be unambiguously concatenated, without the need for separators like commas. Even if you start reading somewhere in the middle of a message, you can unambiguously figure out how to partition the message into codewords. For example, {<code>bear</code>, <code>like</code>} is a comma-free code, but {<code>bear</code>, <code>like</code>, <code>earl</code>} is not, since <code>bearlike</code> contains <code>earl</code> as a substring. A comma-free code also obviously cannot contain any periodic strings (that is, strings which consist of repeated copies of some shorter string), like <code>abcabc</code>, since concatenating such a string with itself produces a string containing the same string as an internal prefix.</p>
<p>Given a fixed alphabet and codeword length, one is naturally led to ask how large a comma-free code can possibly be. Eastman solved this problem for odd codeword lengths, by showing how to construct a maximal commafree code. To understand Eastman’s solution, consider the set $S$ of all <em>aperiodic</em> strings of length $n$ over an alphabet $\Sigma$ (we have already seen that <em>periodic</em> strings cannot be part of a comma-free code). Consider two strings equivalent if they are rotations of each other. For example, <code>bear</code>, <code>earb</code>, <code>arbe</code>, and <code>rbea</code> are all equivalent. This is an equivalence relation on strings, and so it defines a partition of $S$ into classes of equivalent strings. Note that we can never have two equivalent strings as part of the same comma-free code, since if we concatenate a string with itself, the result contains all other equivalent strings as substrings. For example, <code>bearbear</code> contains <code>earb</code>, <code>arbe</code>, and <code>rbea</code>. So <em>at most</em> a comma-free code could contain one string from each equivalence class.</p>
<p>In fact, Eastman shows that for odd $n$ there are comma-free codes that contain <em>exactly</em> one string from each equivalence class! What’s more, his proof is constructive: he shows how to pick a particular, canonical representative from each equivalence class such that the collection of all such canonical representatives is a comma-free code. This is what the program below does: given an odd-length string, it outputs the canonical rotation of that string which is part of a maximal comma-free code.</p>
<p>So, without further ado, let’s see the implementation! Again, I really don’t remember much about the details of how (much less why) this works. For that, I recommend <a href="https://www.youtube.com/watch?v=48iJx8FVuis">watching Knuth’s lecture</a> or <a href="http://www-cs-faculty.stanford.edu/~uno/programs/commafree-eastman-new.w">reading the explanations in his code</a> (you’ll probably want to compile it into LaTeX first).</p>
<p>First, some imports and such. Look, ma, no LANGUAGE extensions!</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span style="color:blue;font-weight:bold;">module</span> <span>Commafree</span> <span style="color:blue;font-weight:bold;">where</span>
<span>&gt;</span> 
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Control</span><span>.</span><span>Arrow</span>      <span style="color:red;">(</span><span>first</span><span style="color:red;">)</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Control</span><span>.</span><span>Monad</span>      <span style="color:red;">(</span><span>when</span><span style="color:red;">)</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Data</span><span>.</span><span>List</span>          <span style="color:red;">(</span><span>findIndex</span><span style="color:red;">,</span> <span>intercalate</span><span style="color:red;">)</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Data</span><span>.</span><span>List</span><span>.</span><span>Split</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Data</span><span>.</span><span>Maybe</span>         <span style="color:red;">(</span><span>catMaybes</span><span style="color:red;">)</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Data</span><span>.</span><span>Monoid</span>        <span style="color:red;">(</span><span style="color:red;">(</span><span>&lt;&gt;</span><span style="color:red;">)</span><span style="color:red;">)</span>
<span>&gt;</span> 
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>System</span><span>.</span><span>Environment</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>System</span><span>.</span><span>Exit</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Text</span><span>.</span><span>Printf</span>
<span>&gt;</span> <span style="color:blue;font-weight:bold;">import</span>           <span>Text</span><span>.</span><span>Read</span>          <span style="color:red;">(</span><span>readMaybe</span><span style="color:red;">)</span>
</code></pre>
<p>Here’s the main Eastman algorithm, which actually works for any list of things with a total order (unlike Knuth’s, which only works for lists of nonnegative integers, although that is obviously just a cosmetic difference, since any finite set with a total order is isomorphic to a set of nonnegative integers). We turn each item into a singleton “block”, then iterate the <code>eastmanRound</code> function, which partitions the blocks into subsequences of blocks, which we coalesce into blocks again. So each iteration makes the partition coarser, <em>i.e.</em> the blocks get bigger. We keep iterating until there is only one block left, which contains the rotation that we seek.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span>eastman</span> <span style="color:red;">::</span> <span>Ord</span> <span>a</span> <span style="color:red;">=&gt;</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span>
<span>&gt;</span> <span>eastman</span>
<span>&gt;</span>   <span style="color:red;">=</span> <span>blockContent</span> <span>.</span> <span>head</span> <span>.</span> <span>head</span>
<span>&gt;</span>   <span>.</span> <span>dropWhile</span> <span style="color:red;">(</span><span style="color:red;">(</span><span>&gt;</span><span class="hs-num">1</span><span style="color:red;">)</span> <span>.</span> <span>length</span><span style="color:red;">)</span>
<span>&gt;</span>   <span>.</span> <span>iterate</span> <span style="color:red;">(</span><span>map</span> <span>mconcat</span> <span>.</span> <span>eastmanRound</span><span style="color:red;">)</span>
<span>&gt;</span>   <span>.</span> <span>map</span> <span>mkBlock</span>
</code></pre>
<p>Some code for dealing with blocks. A block is just a list that keeps track of its length for efficiency. The important point about blocks is that they are ordered first by length, then lexicographically (see the <code>Ord</code> instance below). The <code>Monoid</code> instance is straightforward.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span style="color:blue;font-weight:bold;">data</span> <span>Block</span> <span>a</span> <span style="color:red;">=</span> <span>Block</span> <span style="color:red;">{</span> <span>blockLen</span> <span style="color:red;">::</span> <span>!</span><span>Int</span><span style="color:red;">,</span> <span>blockContent</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span> <span style="color:red;">}</span>
<span>&gt;</span>   <span style="color:blue;font-weight:bold;">deriving</span> <span style="color:red;">(</span><span>Show</span><span style="color:red;">,</span> <span>Eq</span><span style="color:red;">)</span>
<span>&gt;</span> 
<span>&gt;</span> <span style="color:blue;font-weight:bold;">instance</span> <span>Ord</span> <span>a</span> <span style="color:red;">=&gt;</span> <span>Ord</span> <span style="color:red;">(</span><span>Block</span> <span>a</span><span style="color:red;">)</span> <span style="color:blue;font-weight:bold;">where</span>
<span>&gt;</span>   <span>compare</span> <span style="color:red;">(</span><span>Block</span> <span>m</span> <span style="color:blue;font-weight:bold;">as</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Block</span> <span>n</span> <span>bs</span><span style="color:red;">)</span>
<span>&gt;</span>     <span style="color:red;">=</span> <span>compare</span> <span>m</span> <span>n</span> <span>&lt;&gt;</span> <span>compare</span> <span style="color:blue;font-weight:bold;">as</span> <span>bs</span>
<span>&gt;</span> 
<span>&gt;</span> <span style="color:blue;font-weight:bold;">instance</span> <span>Monoid</span> <span style="color:red;">(</span><span>Block</span> <span>a</span><span style="color:red;">)</span> <span style="color:blue;font-weight:bold;">where</span>
<span>&gt;</span>   <span>mempty</span> <span style="color:red;">=</span> <span>Block</span> <span class="hs-num">0</span> <span>[]</span>
<span>&gt;</span>   <span>mappend</span> <span style="color:red;">(</span><span>Block</span> <span>m</span> <span style="color:blue;font-weight:bold;">as</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>Block</span> <span>n</span> <span>bs</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>Block</span> <span style="color:red;">(</span><span>m</span><span>+</span><span>n</span><span style="color:red;">)</span> <span style="color:red;">(</span><span style="color:blue;font-weight:bold;">as</span> <span>++</span> <span>bs</span><span style="color:red;">)</span>
<span>&gt;</span> 
<span>&gt;</span> <span>mkBlock</span> <span style="color:red;">::</span> <span>a</span> <span style="color:red;">-&gt;</span> <span>Block</span> <span>a</span>
<span>&gt;</span> <span>mkBlock</span> <span>a</span> <span style="color:red;">=</span> <span>Block</span> <span class="hs-num">1</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span>
</code></pre>
<p>One round of the algorithm works as follows: we duplicate the list, partition it after each “dip” (<code>chop splitDip</code>, to be explained below), possibly drop some of the leading parts and coalesce other parts based on size parity (<code>pickOdds</code>), and then keep only a total amount of stuff equal to the length of the original list (<code>takeTotal</code>). This last part with <code>takeTotal</code> ensures that we will end up with something which is a rotation of the original input (though partitioned). In an implementation with random-access arrays, one would just wrap the indices around using mod; in this context it’s easier to first duplicate the input list so we can deal with all rotations at once, determine which rotation we want by dropping some stuff from the beginning, then drop any excess stuff at the end.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span>eastmanRound</span> <span style="color:red;">::</span> <span>Ord</span> <span>a</span> <span style="color:red;">=&gt;</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span>
<span>&gt;</span> <span>eastmanRound</span> <span style="color:blue;font-weight:bold;">as</span>
<span>&gt;</span>   <span style="color:red;">=</span> <span>takeTotal</span> <span style="color:red;">(</span><span>length</span> <span style="color:blue;font-weight:bold;">as</span><span style="color:red;">)</span>
<span>&gt;</span>   <span>.</span> <span>pickOdds</span>
<span>&gt;</span>   <span>.</span> <span>chop</span> <span>splitDip</span>
<span>&gt;</span>   <span>$</span> <span style="color:red;">(</span><span style="color:blue;font-weight:bold;">as</span> <span>++</span> <span style="color:blue;font-weight:bold;">as</span><span style="color:red;">)</span>
</code></pre>
<p>It’s interesting to note that in <code>eastmanRound</code> the type <code>a</code> is actually going to be instantiated with <code>Block b</code> for some type <code>b</code>. In the first round, all the blocks are singletons, so this is no different than just taking a list of <code>b</code>. But in subsequent rounds the distinction is nontrivial.</p>
<p>A “dip” is a decreasing substring followed by a single increase, for example, 976325. (Though again, remember that we are actually dealing with sequences of <em>blocks</em>, not integers, so a dip is essentially a sequence of blocks of decreasing length followed by a longer one, with the requisite caveat about blocks of the same length.) <code>splitDip</code> looks for the first place in the list that looks like $a &gt; b &lt; c$ and breaks the list right after it. This is used with the <a href="http://hackage.haskell.org/package/split-0.2.3.1/docs/Data-List-Split.html#v:chop"><code>chop</code> function</a> to split the list into a sequence of dips.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span>splitDip</span> <span style="color:red;">::</span> <span>Ord</span> <span>a</span> <span style="color:red;">=&gt;</span> <span style="color:red;">[</span><span>a</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">(</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">,</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">)</span>
<span>&gt;</span> <span>splitDip</span> <span style="color:red;">(</span><span>a</span><span>:</span><span>b</span><span>:</span><span>cs</span><span style="color:red;">)</span>
<span>&gt;</span>   <span style="color:red;">|</span> <span>a</span> <span>&lt;</span> <span>b</span>     <span style="color:red;">=</span> <span style="color:red;">(</span><span style="color:red;">[</span><span>a</span><span style="color:red;">,</span><span>b</span><span style="color:red;">]</span><span style="color:red;">,</span> <span>cs</span><span style="color:red;">)</span>
<span>&gt;</span>   <span style="color:red;">|</span> <span>otherwise</span> <span style="color:red;">=</span> <span>first</span> <span style="color:red;">(</span><span>a</span><span>:</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>splitDip</span> <span style="color:red;">(</span><span>b</span><span>:</span><span>cs</span><span style="color:red;">)</span><span style="color:red;">)</span>
<span>&gt;</span> <span>splitDip</span> <span style="color:blue;font-weight:bold;">as</span> <span style="color:red;">=</span> <span style="color:red;">(</span><span style="color:blue;font-weight:bold;">as</span><span style="color:red;">,</span><span>[]</span><span style="color:red;">)</span>
</code></pre>
<p><code>pickOdds</code> does something like the following: it looks for maximal sequences of dips where the first dip has odd length and the rest have even length, and merges such sequences into one long partition. It also drops everything prior to the first odd dip. <em>Something</em> like that at least; my memory on this is a bit fuzzy.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span>pickOdds</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span>
<span>&gt;</span> <span>pickOdds</span>
<span>&gt;</span>   <span style="color:red;">=</span> <span>map</span> <span>concat</span>
<span>&gt;</span>   <span>.</span> <span>dropWhile</span> <span style="color:red;">(</span><span>even</span> <span>.</span> <span>length</span> <span>.</span> <span>head</span><span style="color:red;">)</span>
<span>&gt;</span>   <span>.</span> <span>drop</span> <span class="hs-num">1</span>
<span>&gt;</span>   <span>.</span> <span>splitAtOdds</span>
<span>&gt;</span> 
<span>&gt;</span> <span>splitAtOdds</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span><span style="color:red;">]</span>
<span>&gt;</span> <span>splitAtOdds</span> <span style="color:red;">=</span> <span>chop</span> <span>$</span>
<span>&gt;</span>   <span style="color:red;">\</span><span style="color:red;">(</span><span>x</span><span>:</span><span>xs</span><span style="color:red;">)</span> <span style="color:red;">-&gt;</span> <span style="color:blue;font-weight:bold;">let</span> <span style="color:red;">(</span><span>ys</span><span style="color:red;">,</span><span>zs</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>break</span> <span style="color:red;">(</span><span>odd</span><span>.</span><span>length</span><span style="color:red;">)</span> <span>xs</span>
<span>&gt;</span>              <span style="color:blue;font-weight:bold;">in</span>  <span style="color:red;">(</span><span>x</span><span>:</span><span>ys</span><span style="color:red;">,</span> <span>zs</span><span style="color:red;">)</span>
</code></pre>
<p>Finally, <code>takeTotal</code> just takes lists until their total length matches the given total.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span>takeTotal</span> <span style="color:red;">::</span> <span>Int</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span> <span style="color:red;">-&gt;</span> <span style="color:red;">[</span><span style="color:red;">[</span><span>a</span><span style="color:red;">]</span><span style="color:red;">]</span>
<span>&gt;</span> <span>takeTotal</span> <span style="color:blue;font-weight:bold;">_</span> <span>[]</span> <span style="color:red;">=</span> <span>[]</span>
<span>&gt;</span> <span>takeTotal</span> <span>n</span> <span style="color:blue;font-weight:bold;">_</span> <span style="color:red;">|</span> <span>n</span> <span>&lt;=</span> <span class="hs-num">0</span> <span style="color:red;">=</span> <span>[]</span>
<span>&gt;</span> <span>takeTotal</span> <span>n</span> <span style="color:red;">(</span><span>xs</span><span>:</span><span>xss</span><span style="color:red;">)</span> <span style="color:red;">=</span> <span>xs</span> <span>:</span> <span>takeTotal</span> <span style="color:red;">(</span><span>n</span> <span style="color:green;">-</span> <span>length</span> <span>xs</span><span style="color:red;">)</span> <span>xss</span>
</code></pre>
<p>And that’s it! I also put together a <code>main</code> which more or less emulates what Knuth’s C program does. My program and Knuth’s give the same output on every example I have tried (except that Knuth’s prints out some intermediate information about each iteration step; mine just prints the final answer).</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span>&gt;</span> <span>main</span> <span style="color:red;">::</span> <span>IO</span> <span>()</span>
<span>&gt;</span> <span>main</span> <span style="color:red;">=</span> <span style="color:blue;font-weight:bold;">do</span>
<span>&gt;</span>   <span>progName</span> <span style="color:red;">&lt;-</span> <span>getProgName</span>
<span>&gt;</span>   <span>args</span> <span style="color:red;">&lt;-</span> <span>getArgs</span>
<span>&gt;</span>   <span style="color:blue;font-weight:bold;">let</span> <span>n</span> <span style="color:red;">=</span> <span>length</span> <span>args</span>
<span>&gt;</span>   <span>when</span> <span style="color:red;">(</span><span>n</span> <span>&lt;</span> <span class="hs-num">3</span><span style="color:red;">)</span> <span>$</span> <span style="color:blue;font-weight:bold;">do</span>
<span>&gt;</span>     <span>printf</span> <span style="color:teal;">"Usage: %s x1 x2 ... xn\n"</span> <span>progName</span>
<span>&gt;</span>     <span>exitWith</span> <span style="color:red;">(</span><span>ExitFailure</span> <span class="hs-num">1</span><span style="color:red;">)</span>
<span>&gt;</span>   <span>when</span> <span style="color:red;">(</span><span>even</span> <span>n</span><span style="color:red;">)</span> <span>$</span> <span style="color:blue;font-weight:bold;">do</span>
<span>&gt;</span>     <span>printf</span> <span style="color:teal;">"The number of items, n, should be odd, not `%d'!\n"</span> <span>n</span>
<span>&gt;</span>     <span>exitWith</span> <span style="color:red;">(</span><span>ExitFailure</span> <span class="hs-num">2</span><span style="color:red;">)</span>
<span>&gt;</span>   <span style="color:blue;font-weight:bold;">let</span> <span>ns</span> <span style="color:red;">::</span> <span style="color:red;">[</span><span>Maybe</span> <span>Int</span><span style="color:red;">]</span>
<span>&gt;</span>       <span>ns</span> <span style="color:red;">=</span> <span>map</span> <span>readMaybe</span> <span>args</span>
<span>&gt;</span>   <span style="color:blue;font-weight:bold;">case</span> <span>findIndex</span> <span style="color:red;">(</span><span>maybe</span> <span>True</span> <span style="color:red;">(</span><span>&lt;</span><span class="hs-num">0</span><span style="color:red;">)</span> <span>.</span> <span>snd</span><span style="color:red;">)</span> <span style="color:red;">(</span><span>zip</span> <span style="color:red;">[</span><span class="hs-num">1</span><span style="color:red;">..</span><span style="color:red;">]</span> <span>ns</span><span style="color:red;">)</span> <span style="color:blue;font-weight:bold;">of</span>
<span>&gt;</span>     <span>Just</span> <span>i</span> <span style="color:red;">-&gt;</span> <span style="color:blue;font-weight:bold;">do</span>
<span>&gt;</span>       <span>printf</span> <span style="color:teal;">"Argument %d should be a nonnegative integer, not `%s'!\n"</span>
<span>&gt;</span>                         <span>i</span>                             <span style="color:red;">(</span><span>args</span> <span>!!</span> <span style="color:red;">(</span><span>i</span><span style="color:green;">-</span><span class="hs-num">1</span><span style="color:red;">)</span><span style="color:red;">)</span>
<span>&gt;</span>       <span>exitWith</span> <span style="color:red;">(</span><span>ExitFailure</span> <span class="hs-num">3</span><span style="color:red;">)</span>
<span>&gt;</span>     <span>Nothing</span> <span style="color:red;">-&gt;</span>
<span>&gt;</span>       <span>putStrLn</span> <span>.</span>
<span>&gt;</span>       <span style="color:red;">(</span><span style="color:teal;">' '</span> <span>:</span><span style="color:red;">)</span> <span>.</span> <span>intercalate</span> <span style="color:teal;">" "</span> <span>.</span> <span>map</span> <span>show</span> <span>.</span>
<span>&gt;</span>       <span>eastman</span> <span>.</span> <span>catMaybes</span> <span>$</span> <span>ns</span>
</code></pre>
<div id="refs" class="references">

</div>

