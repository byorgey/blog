---
title: 'Abstraction, intuition, and the "monad tutorial fallacy"'
published: 2009-01-13T03:34:00Z
categories: haskell,learning,math,teaching
tags: abstraction,intuition,monads,pedagogy,tutorials
---

While working on an article for the Monad.Reader, I've had the opportunity to think about how people learn and gain intuition for abstraction, and the implications for pedagogy.  The heart of the matter is that people <em>begin with the concrete, and move to the abstract</em>.  Humans are very good at pattern recognition, so this is a natural progression.  By examining concrete objects in detail, one begins to notice similarities and patterns, until one comes to understand on a more abstract, intuitive level.  This is why it's such good pedagogical practice to demonstrate examples of concepts you are trying to teach.  It's particularly important to note that this process doesn't change <i>even when one is presented with the abstraction up front</i>!  For example, when presented with a mathematical definition for the first time, most people (me included) don't "get it" immediately: it is only after examining some specific instances of the definition, and working through the implications of the definition in detail, that one begins to appreciate the definition and gain an understanding of what it "really says."

Unfortunately, there is a whole cottage industry of monad tutorials that get this wrong.  To see what I mean, imagine the following scenario: Joe Haskeller is trying to learn about monads.  After struggling to understand them for a week, looking at examples, writing code, reading things other people have written, he finally has an "aha!" moment: everything is suddenly clear, and Joe Understands Monads!  What has really happened, of course, is that Joe's brain has fit all the details together into a higher-level abstraction, a metaphor which Joe can use to get an intuitive grasp of monads; let us suppose that Joe's metaphor is that Monads are Like Burritos.  Here is where Joe badly misinterprets his own thought process: "Of course!" Joe thinks.  "It's all so simple now.  The key to understanding monads is that they are Like Burritos.  If only I had thought of this before!"  The problem, of course, is that if Joe HAD thought of this before, it wouldn't have helped: the week of struggling through details was a necessary and integral part of forming Joe's Burrito intuition, not a sad consequence of his failure to hit upon the idea sooner.  

But now Joe goes and writes a monad tutorial called "Monads are Burritos," under the well-intentioned but mistaken assumption that if other people read his magical insight, learning about monads will be a snap for them.  "Monads are easy," Joe writes.  "Think of them as burritos."  Joe hides all the actual details about types and such because those are scary, and people will learn better if they can avoid all that difficult and confusing stuff.  Of course, exactly the opposite is true, and all Joe has done is make it <i>harder</i> for people to learn about monads, because now they have to spend a week thinking that monads are burritos and getting utterly confused, and then a week trying to forget about the burrito analogy, before they can actually get down to the business of learning about monads.  (Of course, certainly not <i>all</i> monad tutorials are like this, and I don't even have any particular ones in mind, just a general impression left over from reading many of them, but if the shoe fits...)

What I term the "monad tutorial fallacy," then, consists in failing to recognize the critical role that struggling through fundamental details plays in the building of intuition.  This, I suspect, is also one of the things that separates good teachers from poor ones.  If you ever find yourself frustrated and astounded that someone else does not grasp a concept as easily and intuitively as you do, even after you clearly explain your intuition to them ("look, it's really quite simple," you say...) then you are suffering from the monad tutorial fallacy.

